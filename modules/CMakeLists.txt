set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib/)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin/)

set(VERSION_HEAD_FILE ${PROJECT_SOURCE_DIR}/framework/core/include/cnstream_version.hpp)
execute_process(COMMAND awk /CNSTREAM_MAJOR_VERSION/ ${VERSION_HEAD_FILE} OUTPUT_VARIABLE VERSION_STR)
string(REGEX MATCH "[0-9]+"  MAJOR_VERSION ${VERSION_STR})
execute_process(COMMAND awk /CNSTREAM_MINOR_VERSION/ ${VERSION_HEAD_FILE} OUTPUT_VARIABLE VERSION_STR)
string(REGEX MATCH "[0-9]+"  MINOR_VERSION ${VERSION_STR})
execute_process(COMMAND awk /CNSTREAM_PATCH_VERSION/ ${VERSION_HEAD_FILE} OUTPUT_VARIABLE VERSION_STR)
string(REGEX MATCH "[0-9]+"  PATCH_VERSION ${VERSION_STR})
set(CNSTREAM_TARGET_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}")

include_directories(${PROJECT_SOURCE_DIR}/3rdparty/googletest/include/)
include_directories(${3RDPARTY_INCLUDE_DIRS})

set(module_list "")
if(build_ipc)
  list(APPEND module_list ipc)
  install(DIRECTORY ipc/include/ DESTINATION include)
endif()
if(build_encode)
  list(APPEND module_list encode)
  install(DIRECTORY encode/include/ DESTINATION include)
endif()
if(build_inference)
  list(APPEND module_list inference)
  install(DIRECTORY inference/include/ DESTINATION include)
endif()
if(build_osd)
  list(APPEND module_list osd)
  install(DIRECTORY osd/include/ DESTINATION include)
endif()
if(build_rtsp_sink)
  list(APPEND module_list rtsp_sink)
  install(DIRECTORY rtsp_sink/include/ DESTINATION include)
endif()
if(build_source)
  list(APPEND module_list source)
  install(DIRECTORY source/include/ DESTINATION include)
endif()
if(build_track)
  list(APPEND module_list track)
  install(DIRECTORY track/include/ DESTINATION include)
endif()

list(APPEND module_list display)
install(DIRECTORY display/include/ DESTINATION include)

if(HAVE_FFMPEG)
  include_directories(${FFMPEG_INCLUDE_DIR})
endif()
if(HAVE_OPENCV)
include_directories(${OpenCV_INCLUDE_DIRS})
endif()
if(build_perf)
  include_directories(${PROJECT_SOURCE_DIR}/3rdparty/sqlite3/)
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-deprecated-declarations")
#FIXME
set(SOURCE_LINKER_LIBS dl cnstream_core ${CN_LIBS} ${3RDPARTY_LIBS} ${OpenCV_LIBS} ${SDL2_LIBRARIES} ${FFMPEG_LIBRARIES} pthread)

include_directories(${PROJECT_SOURCE_DIR}/modules)
file(GLOB srcs ${PROJECT_SOURCE_DIR}/modules/*.cpp)

foreach(module ${module_list})
  include_directories(${PROJECT_SOURCE_DIR}/modules/${module}/include)
  file(GLOB_RECURSE module_src ${PROJECT_SOURCE_DIR}/modules/${module}/*.cpp)
  list(APPEND srcs ${module_src})
endforeach()

add_library(cnstream_va SHARED ${srcs})

if (SANITIZE_MEMORY OR SANITIZE_ADDRESS OR SANITIZE_THREAD OR SANITIZE_UNDEFINED)
    add_sanitizers(cnstream_va)
endif()

install(TARGETS cnstream_va LIBRARY DESTINATION lib)
target_link_libraries(cnstream_va ${SOURCE_LINKER_LIBS} ${Live555_LIBS} sqlite3)
set_target_properties(cnstream_va PROPERTIES VERSION ${CNSTREAM_TARGET_VERSION})

if(NOT Live555_LIBS STREQUAL "")
  set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES ${PROJECT_SOURCE_DIR}/3rdparty/live555)
  if(CMAKE_TOOLCHAIN_FILE)
    message(STATUS ${CROSS_PREFIX})
    add_custom_target(live555 sh ${PROJECT_SOURCE_DIR}/tools/build_live555.sh ${CROSS_PREFIX})
  else()
    add_custom_target(live555 sh ${PROJECT_SOURCE_DIR}/tools/build_live555.sh)
  endif()
  add_dependencies(cnstream_va live555)
endif()

if(build_tests)
  add_subdirectory(unitest)
endif()
